#!/usr/bin/env python3
"""
Write a selected_particles.star file from the good_part_frac.txt generated by submit_2dassess.py.
Not working for Relion 3.1 with the new optical group in the star file.
"""

import os
import pandas as pd
import pickle
import argparse
import shutil

def setupParserOptions():
    ap = argparse.ArgumentParser()
    ap.add_argument('-i', '--input', default='run_it025_data.star',
                    help="Name of the *_data.star file outputted by 2D classification. Default is run_it025_data.star.")
    ap.add_argument('-c', '--2dclass', default='2DClass',
                    help="Name of the 2D classification directory.")
    ap.add_argument('-g', '--good_part_frac', default='good_part_frac.txt',
                    help="Name of the good_part_frac txt file outputted by 2DAssess. Default is good_part_frac.txt.")
    ap.add_argument('-o', '--output', default='selected_particles.star',
                    help="Name of the output star file.")
    args = vars(ap.parse_args())
    return args

def read_goodfrac(good_part_frac):
# From good_part_frac file, find the best subdirectory by finding the maximum good particle fraction.
    with open(good_part_frac) as f:
        a = f.readlines()
    max_good_frac = 0
    for i in range(1, len(a), 3):
        if float(a[i]) > max_good_frac:
            max_good_frac = float(a[i])
            best_subdir = a[i-1].rstrip()
            good_class_idx = a[i+1].rstrip().split(",")
    return max_good_frac, best_subdir, good_class_idx

def save_header(class_data_star):
    with open(class_data_star) as star:
        header = star.readlines()[0:33]
    return header

def get_good_particles_list(class_data_star, good_class_idx):
    good_particles_list = []
    with open(class_data_star) as star:
        class_data = star.readlines()[33:]
        class_data_df = [x.split() for x in class_data]
        class_data_df = pd.DataFrame(class_data_df)
        class_data_df = class_data_df.dropna()

    for i in range(len(class_data_df)):
        particle = class_data_df.iloc[i,:].values
        if str(int(particle[2])) in good_class_idx:
            good_particles_list.append(class_data[i])
    return good_particles_list

def write_good_particles_star(class_data_star, good_class_idx, good_particles_star):
    header = save_header(class_data_star)
    good_particles_list = get_good_particles_list(class_data_star, good_class_idx)
    with open(good_particles_star, 'w') as f:
        for l_0 in header:
            f.write(l_0)
        for l in good_particles_list:
            f.write(l)

def main(**args):
    wkdir = os.path.abspath(os.path.join(args['2dclass'], os.pardir))
    os.chdir(wkdir)
    good_part_frac = args['good_part_frac']
    max_good_frac, best_subdir, good_class_idx = read_goodfrac(good_part_frac)
    print(best_subdir)
    print(max_good_frac)
    print(good_class_idx)
    input = os.path.join(args['2dclass'], best_subdir, args['input'])
    write_good_particles_star(input, good_class_idx, args['output'])

if __name__ == '__main__':
    args = setupParserOptions()
    main(**args)
