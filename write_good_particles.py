#!/usr/bin/env python3
"""
Write a selected_particles.star file from the good_class_idx generated by evaluate_class2d.py.
"""
#%%
import os
import pandas as pd
import pickle
import argparse
import shutil

def setupParserOptions():
    ap = argparse.ArgumentParser()
    ap.add_argument('-i', '--input',
                    help="Provide the path to the working/job directory.")
    ap.add_argument('-p', '--param',
                    help="Best parameter for 2d classification selected.")
    ap.add_argument('-c', '--class2d',
                    help="Name of the class2d directory.")
    ap.add_argument('-g', '--good_class_idx',
                    help="Name of the good_class_idx (relative to the input path).")
    ap.add_argument('-o', '--output', default='selected_particles.star',
                    help="Name of the output star file.")
    args = vars(ap.parse_args())
    return args

def save_header(class_data_star):
    with open(class_data_star) as star:
        header = star.readlines()[0:33]
    return header

def get_good_particles_list(class_data_star, good_class_idx):

    good_particles_list = []
    with open(class_data_star) as star:
        class_data = star.readlines()[33:]
        class_data_df = [x.split() for x in class_data]
        class_data_df = pd.DataFrame(class_data_df)
        class_data_df = class_data_df.dropna()
    with open(good_class_idx, 'rb') as f:
        good_class_idx = pickle.load(f)

    for i in range(len(class_data_df)):
        particle = class_data_df.iloc[i,:].values
        if str(int(particle[2])) in good_class_idx:
            good_particles_list.append(class_data[i])
    return good_particles_list


def write_good_particles_star(class_data_star, good_class_idx, good_particles_star):
    header = save_header(class_data_star)
    good_particles_list = get_good_particles_list(class_data_star, good_class_idx)
    with open(good_particles_star, 'w') as f:
        for l_0 in header:
            f.write(l_0)
        for l in good_particles_list:
            f.write(l)

def main(**args):
    os.chdir(args['input'])
    param = args['param']
    try:
        os.mkdir('selected_particles')
    except OSError:
        pass
    try:
        os.mkdir(os.path.join('selected_particles', param))
    except OSError:
        pass
    class_data_star = os.path.join(args['class2d'], param, 'run_it025_data.star')
    output_star = os.path.join('selected_particles', param, args['output'])

    write_good_particles_star(class_data_star, args['good_class_idx'], good_particles_star=output_star)

if __name__ == '__main__':
    args = setupParserOptions()
    main(**args)
